@page "/job-info/{jobId:Guid}"

@using BlazorApp.Extensions.ViewModels.IdentityVMs
@using BlazorApp.Extensions.ViewModels.JobsVMs
@using BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager NavigationManager
@inject IJobService JobService
@inject ITasksService TasksService
@inject IUserService UserService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Деталі роботи</PageTitle>

<h3>Деталі роботи</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (job != null)
{
    <div>
        <p><strong>ID:</strong> @job.Id.ToString()</p>
        <p><strong>Модель автомобіля:</strong>@job.ModelName</p>
        <p><strong>Опис проблеми:</strong> @job.Description </p>
        <p><strong>Дата візиту:</strong> @job.IssueDate.ToString("dd/MM/yyyy")</p>
        @if (job.FinishDate != null) {
            <p><strong>Дата завершення роботи:</strong> @job.FinishDate.Value.ToString("dd/MM/yyyy")</p>
        }
        
        <AuthorizeView Roles="Admin, Mechanic">
            <button class="btn btn-primary" @onclick="AddTask">Додати завдання</button>
        </AuthorizeView>
        
        <h4>Список завдань</h4>
        <QuickGrid Items="@taskViewModelsQueryable">
            <PropertyColumn Property="@(t => t.Name)" Title="Назва" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(t => t.Task.Take(20).Append('.').Append('.').Append('.'))" Title="Опис"></PropertyColumn>
            <TemplateColumn Title="Статус">
                @context.Status
                <InputSelect @bind-Value="context.Status" @onchange="(e) => UpdateTaskStatus(context.Id, context.Status)">
                    <option value="Pending">Pending</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Completed">Completed</option>
                </InputSelect>
            </TemplateColumn>            <TemplateColumn Title="Механік">
                <span>@(mechanics.Where(p=>p.Id == context.MechanicId).FirstOrDefault().UserName)</span>
            </TemplateColumn>
            <TemplateColumn Title="Прерйти до роботи">

            </TemplateColumn>        
            <TemplateColumn Title="Дії">

            </TemplateColumn>


        </QuickGrid>
    </div>
}
else
{
    <p>Завантаження...</p>
}

@code {
    [Parameter]
    public Guid jobId { get; set; }

    private JobVM job;
    private List<TaskViewModel> tasks;
    private string errorMessage;
    private List<MechanicViewModel> mechanics;

    private IQueryable<TaskViewModel> taskViewModelsQueryable;

    protected override async Task OnInitializedAsync()
    {
        try
        {

        //    job = JobService.GetJobById(jobId);

            if (job == null)
            {
                errorMessage = "Робота не знайдена.";
            }
            else
            { 
                var mechanicViewModels = await UserService.GetMechanics();
                mechanics = mechanicViewModels.ToList();
//var tsksViewModels = TasksService.
         //       tasks = 
               // taskViewModelsQueryable = tasks.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка завантаження деталей роботи: {ex.Message}";
        }
    }

    private void AddTask()
    {
        NavigationManager.NavigateTo($"/jobs/{jobId}/tasks/add");
    }

    private void EditTask(Guid taskId)
    {
        NavigationManager.NavigateTo($"/jobs/{jobId}/tasks/edit/{taskId}");
    }


    private void UpdateTaskStatus(Guid id,string status)
    {
        
    }
    private async Task DeleteTask(Guid taskId)
    {
        try
        {
            //await Http.DeleteAsync($"api/tasks/{taskId}");
           // tasks = await Http.GetFromJsonAsync<List<TaskViewModel>>($"api/jobs/{jobId}/tasks");
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка видалення завдання: {ex.Message}";
        }
    }

}
