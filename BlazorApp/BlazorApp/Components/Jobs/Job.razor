@page "/job-info/{jobId:guid}"

@using BlazorApp.Extensions.ViewModels.CatalogVMs
@using BlazorApp.Extensions.ViewModels.IdentityVMs
@using BlazorApp.Extensions.ViewModels.JobsVMs
@using BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager NavigationManager
@inject IJobService JobService
@inject ITasksService TasksService
@inject IUserService UserService
@inject IOrderService OrderService
@inject IVehicleService VehicleService

@inject IJSRuntime JS

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Деталі роботи</PageTitle>

<h3>Деталі роботи</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (job != null)
{
    <div class="job-details-container">
        <div class="job-info">
            <p><strong>ID:</strong> @job.Id.ToString()</p>
            <p><strong>Модель автомобіля:</strong> @(Vehicles.Where(p => p.Id == job.ModelId).FirstOrDefault().FullModelName)</p>
            <p><strong>Опис проблеми:</strong> @job.Description</p>
            <p><strong>Дата візиту:</strong> @job.IssueDate.ToString()</p>
            @if (job.FinishDate != null)
            {
                <p><strong>Дата завершення роботи:</strong> @job.FinishDate.Value.ToString()</p>
            }
        </div>

        <AuthorizeView Roles="Admin,Mechanic">
            <button class="btn btn-primary mb-3" @onclick="AddTask">Додати завдання</button>
        </AuthorizeView>

        @if (job.OrderId != null)
        {
            <p><strong>ID Замовлення:</strong> @job.OrderId</p>
            <button class="btn btn-primary mb-3" @onclick="NavtoOrder">Перейти до замовлення</button>
        }
        else
        {
            <AuthorizeView Roles="Admin,Mechanic">
                <button class="btn btn-primary mb-3" @onclick="AddOrder">Додати замовлення</button>
            </AuthorizeView>
        }

        <div class="task-list">
            <h4>Список завдань</h4>
            <QuickGrid Items="@taskViewModelsQueryable" Class="table table-striped">
                <PropertyColumn Property="@(t => t.Name)" Title="Назва" Sortable="true"></PropertyColumn>
                <PropertyColumn Property="@(t => t.Task)" Title="Опис"></PropertyColumn>
                <TemplateColumn Title="Статус">
                    @context.Status
                    <InputSelect @bind-Value="context.Status" @onchange="(e) => UpdateTaskStatus(context.Id, context.Status)">
                        <option value="Pending">Pending</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Completed">Completed</option>
                    </InputSelect>
                </TemplateColumn>
                <TemplateColumn Title="Механік">
                    <span>@mechanics.FirstOrDefault(p => p.Id == context.MechanicId)?.UserName</span>
                </TemplateColumn>
                <TemplateColumn Title="Прерйти до завдання">
                    <button class="btn btn-info" @onclick="() => NavigateToTask(context.Id)">Перейти</button>
                </TemplateColumn>
                    <AuthorizeView Roles="Admin">
                        <ChildContent Context="authContext">
                            <TemplateColumn Title="Дії">
                                <button class="btn btn-danger" @onclick="() => DeleteTask(context.Id)">Видалити</button>
                            </TemplateColumn>
                        </ChildContent>
                    </AuthorizeView>
            </QuickGrid>
        </div>

        @if (job.OrderId != null)
        {
            <div class="parts-list mt-4">
                <h4>Список запчастин</h4>
                <QuickGrid Items="@taskViewModelsQueryable" Class="table table-striped">
                    <PropertyColumn Property="@(t => t.Name)" Title="Назва" Sortable="true"></PropertyColumn>
                    <PropertyColumn Property="@(t => new string(t.Task.Take(20).ToArray()) + "...")" Title="Опис"></PropertyColumn>
                    <TemplateColumn Title="Статус">
                        @context.Status
                        <InputSelect @bind-Value="context.Status" @onchange="(e) => UpdateTaskStatus(context.Id, context.Status)">
                            <option value="Pending">Pending</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Completed">Completed</option>
                        </InputSelect>
                    </TemplateColumn>
                    <TemplateColumn Title="Механік">
                        <span>@mechanics.FirstOrDefault(p => p.Id == context.MechanicId)?.UserName</span>
                    </TemplateColumn>
                    <TemplateColumn Title="Прерйти до роботи">
                        <button class="btn btn-info" @onclick="() => NavigateToTask(context.Id)">Перейти</button>
                    </TemplateColumn>
                    <AuthorizeView Roles="Admin">
                        <ChildContent Context="authContext">
                            <TemplateColumn Title="Дії">
                                <button class="btn btn-danger" @onclick="() => DeleteTask(context.Id)">Видалити</button>
                            </TemplateColumn>
                        </ChildContent>
                    </AuthorizeView>
                </QuickGrid>

            </div>
        }
    </div>
}
else
{
    <p>Завантаження...</p>
}

@code {
    [Parameter]
    public Guid jobId { get; set; }

    private JobVM job;
    private List<TaskViewModel> tasks;
    private string errorMessage;
    private List<MechanicViewModel> mechanics;
    private List<VehicleViewModel> Vehicles;

    private IQueryable<TaskViewModel> taskViewModelsQueryable = Enumerable.Empty<TaskViewModel>().AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            job = await JobService.GetJobById(jobId);

            if (job == null)
            {
                errorMessage = "Робота не знайдена.";
            }
            else
            {
                var mechanicVMs = await UserService.GetMechanics();
                var tasksVMs = await TasksService.GetTasksByJobId(job.Id.Value);

                if (tasksVMs != null && tasksVMs.Any())
                {
                    tasks = tasksVMs.ToList();
                    taskViewModelsQueryable = tasks.AsQueryable();
                }

                var Vehiclesvms = await VehicleService.GetCarModelsAsync();
                mechanics = mechanicVMs.ToList();
                Vehicles = Vehiclesvms.ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка завантаження деталей роботи: {ex.Message}";
        }
    }


    private void AddTask()
    {
        NavigationManager.NavigateTo($"/tasks/add");
    }

    private async void AddOrder()
    {
        var res = await OrderService.GetNewOrder();



        NavigationManager.NavigateTo($"/orders/{res.Id}");
    }
    private async void NavtoOrder()
    {

        NavigationManager.NavigateTo($"/orders/{job.OrderId}");
    }

    private void NavigateToTask(Guid taskId)
    {
        NavigationManager.NavigateTo($"/tasks/edit/{taskId}");
    }

    private void UpdateTaskStatus(Guid id, string status)
    {
        // Implement task status update logic
    }

    private async Task DeleteTask(Guid taskId)
    {
        try
        {
            await TasksService.DeleteTask(taskId);
            tasks = (await TasksService.GetTasksByJobId(job.Id.Value)).ToList();
            taskViewModelsQueryable = tasks.AsQueryable();

        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка видалення завдання: {ex.Message}";
        }
    }
}
