@page "/jobs"

@using BlazorApp.Components.Account
@using BlazorApp.Extensions.ViewModels.CatalogVMs
@using BlazorApp.Extensions.ViewModels.IdentityVMs
@using BlazorApp.Extensions.ViewModels.JobsVMs
@using BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Authorization
@using Blazorise
@using System.Security.Claims

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IJobService JobService
@inject IVehicleService VehickeService

<PageTitle>Роботи</PageTitle>

<h3>Роботи</h3>

<AuthorizeView Roles="Admin">
    <div>
        <Button @onclick="ShowAddJobModal">Додати нову роботу</Button>

        <Select TItem="string" @bind-SelectedValue="selectedStatus" @bind-SelectedValue:after="FilterJobs">
            @foreach (var status in statuses)
            {
                <SelectItem Value="@status">@status</SelectItem>
            }
        </Select>

        <QuickGrid Items="@jobModelsQierable" RowClick="OnRowClick">
            <PropertyColumn Property="@(p=>p.Id)" Title="ID" />
                <TemplateColumn Title="Модель ">
                <ChildContent Context="job">
                    @if(job.ModelId.HasValue){
                        <span>@(Vehicles.Where(p=>p.Id == job.ModelId).FirstOrDefault().FullModelName)</span>
                    }
                    else
                    {
                        <span>@(job.ModelName)</span>
                    }
                </ChildContent>
            </TemplateColumn>
            <PropertyColumn Property="@(p=>p.Description)" Title="Опис проблеми" />
            <PropertyColumn Property="@(p=>p.IssueDate)" Title="Дата візиту" />
            <PropertyColumn Property="@(p=>p.Status)" Title="Статус" />
            <TemplateColumn Title="Дії">
                <ChildContent Context="job">
                    <Button @onclick="() => OnViewJob(job)">Переглянути</Button>
                </ChildContent>
            </TemplateColumn>
        </QuickGrid>
    </div>
</AuthorizeView>
<AuthorizeView Roles="Mechanic">

    <div>

        <Select TItem="string" @bind-SelectedValue="selectedStatus" @bind-SelectedValue:after="FilterJobs">
            @foreach (var status in statuses)
            {
                <SelectItem Value="@status">@status</SelectItem>
            }
        </Select>

        <QuickGrid Items="@jobModelsQierable" RowClick="OnRowClick">
            <PropertyColumn Property="@(p=>p.Id)" Title="ID" />
            <TemplateColumn Title="Модель ">
                <ChildContent Context="job">
                    @if (job.ModelId.HasValue)
                    {
                        <span>@(Vehicles.Where(p => p.Id == job.ModelId).First().FullModelName)</span>
                    }
                    else
                    {
                        <span>@(job.ModelName)</span>
                    }
                </ChildContent>
            </TemplateColumn>            <PropertyColumn Property="@(p=>p.Description)" Title="Опис проблеми" />
            <PropertyColumn Property="@(p=>p.IssueDate)" Title="Дата візиту" />
            <PropertyColumn Property="@(p=>p.Status)" Title="Статус" />
            <TemplateColumn Title="Дії">
                <ChildContent Context="job">
                    <Button @onclick="() => OnViewJob(job)">Переглянути</Button>
                </ChildContent>
            </TemplateColumn>
        </QuickGrid>
    </div>
</AuthorizeView>
<Modal @bind-Visible="isAddJobModalVisible">
    <ModalContent>
        <ModalHeader>
            <h5 class="modal-title">Нова робота</h5>
            <Button CloseButton @onclick="() => isAddJobModalVisible = false"></Button>
        </ModalHeader>
        <ModalBody>
            <div class="form-group">
                <label for="carModel">Модель автомобіля</label>
                <InputText id="carModel" @bind-Value="newJob.ModelName" />
            </div>
            <div class="form-group">
                <label for="problemDescription">Опис проблеми</label>
                <InputText id="problemDescription" @bind-Value="newJob.Description" />
            </div>
            <div class="form-group">
                <label for="visitDate">Дата візиту</label>
                <InputDate id="visitDate" @bind-Value="newJob.IssueDate" />
            </div>
            <div class="form-group">
                <label for="status">Статус</label>
                <Select @bind-SelectedValue="newJob.Status">
                    @foreach (var status in statuses.Skip(1))
                    {
                        <SelectItem Value="@status">@status</SelectItem>
                    }
                </Select>
            </div>
        </ModalBody>
        <ModalFooter>
            <Button @onclick="SaveJob">Зберегти</Button>
            <Button @onclick="() => isAddJobModalVisible = false">Закрити</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<JobVM> jobs = new();
    private List<JobVM> filteredJobs = new();
    private List<MechanicViewModel> mechanics = new();
    private List<VehicleViewModel> Vehicles;



    private IQueryable<JobVM> jobModelsQierable = Enumerable.Empty<JobVM>().AsQueryable();
    private List<string> statuses = new() { "all", "NewJob", "InProgress", "Completed" };
    private string selectedStatus = "all";
    private bool isAddJobModalVisible = false;
    private JobVM newJob = new JobVM();
    private JobVM selectedJob = null;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity.IsAuthenticated)
        {
            var roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();
            // Опрацюйте ролі користувача тут   
            try
            {
                if (roles.FirstOrDefault().Equals("Admin"))
                {
                    var jobsVMs = await JobService.GetAllJobs();

                    jobs = jobsVMs.ToList();

                }
                if (roles.FirstOrDefault().Equals("Mechanic"))
                {
                    var jobsVMs = await JobService.GetJobByMechanicId(Guid.Parse(user.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault().Value));
                    jobs = jobsVMs.ToList();
                }
                var  Vehiclesvms = await VehickeService.GetCarModelsAsync();

                Vehicles = Vehiclesvms.ToList();
            }
            catch(Exception e)
            {
                
            }


            jobModelsQierable = jobs.AsQueryable();

        }

        FilterJobs();

        jobModelsQierable = jobs.AsQueryable();
    }

    private void FilterJobs()
    {
        if (selectedStatus == "NewJob")
        {
            filteredJobs = jobs.Where(job => job.Status == "NewJob" || job.MechanicId == null).OrderByDescending(job => job.IssueDate).ToList();
        }
        else if (selectedStatus == "InProgress")
        {
            filteredJobs = jobs.Where(job => job.Status == "InProgress").OrderByDescending(job => job.IssueDate).ToList();
        }
        else if (selectedStatus == "Completed")
        {
            filteredJobs = jobs.Where(job => job.Status == "Completed").OrderByDescending(job => job.IssueDate).ToList();
        }
        else
        {
            filteredJobs = jobs.OrderByDescending(job => job.IssueDate).ToList();
        }
        jobModelsQierable = filteredJobs.AsQueryable();
    }

    private void ShowAddJobModal()
    {
        newJob = new JobVM();
        isAddJobModalVisible = true;
    }

    private void SaveJob()
    {
        if (newJob == null)
        {
            jobs.Add(newJob);
        }
        else
        {
            var job = jobs.FirstOrDefault(j => j.Id == newJob.Id);
            if (job != null)
            {
                job.Status = newJob.Status;
                job.Description = newJob.Description;
                job.IssueDate = newJob.IssueDate;
                job.Status = newJob.Status;
            }
        }

        FilterJobs();
        isAddJobModalVisible = false;
    }

    private void NavigateToJob(Guid jobId)
    {
        NavigationManager.NavigateTo($"/job-info/{jobId.ToString()}");
    }

    private void OnRowClick(JobVM job)
    {
        NavigateToJob(job.Id.Value);
    }

    private void OnViewJob(JobVM job)
    {
        NavigateToJob(job.Id.Value);
    }
}
