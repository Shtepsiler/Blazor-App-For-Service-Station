@page "/myjobs/job/"
@inject HttpClient Http
@using Blazorise

<PageTitle>Деталі роботи</PageTitle>

<h3>Деталі роботи</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (visit != null)
{
    <div>
        <p><strong>Модель автомобіля:</strong> @visit.CarModel</p>
        <p><strong>Опис проблеми:</strong> @visit.ProblemDescription</p>
        <p><strong>Дата візиту:</strong> @visit.VisitDate</p>

        <h4>Завдання</h4>
        <button class="btn btn-secondary" @onclick="ToggleTasks" aria-expanded="@showTasks" aria-controls="taskList">
            Завдання
        </button>

        <div class="collapse @((showTasks ? "show" : ""))" id="taskList">
            <ul class="list-group mt-3">
                @foreach (var task in tasks)
                {
                    <li class="list-group-item">
                        <a @onclick="() => ShowTaskDialog(task)" style="cursor:pointer;">@task.Name</a>
                    </li>
                }
            </ul>
        </div>
    </div>
}
else
{
    <p>Завантаження...</p>
}

<Modal @ref="taskModal">
    <ModalHeader>@selectedTask?.Name</ModalHeader>
        <ModalBody>
            @if (selectedTask != null)
        {
            <p><strong>Опис:</strong> @selectedTask.Description</p>
            <p><strong>Статус:</strong> @selectedTask.Status</p>
            <!-- Додаткова інформація про завдання -->
        }
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" @onclick="CloseTaskDialog">Закрити</Button>
    </ModalFooter>
</Modal>

@code {
    [Parameter]
    public int visitId { get; set; }

    private VisitModel visit;
    private List<TaskModel> tasks;
    private TaskModel selectedTask;
    private string errorMessage;
    private bool showTasks = false;
    private Modal taskModal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            visit = await Http.GetFromJsonAsync<VisitModel>($"api/visits/{visitId}");
            if (visit == null)
            {
                errorMessage = "Visit not found.";
            }
            else
            {
                tasks = await Http.GetFromJsonAsync<List<TaskModel>>($"api/visits/{visitId}/tasks");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while fetching visit details: {ex.Message}";
        }
    }

    private void ToggleTasks()
    {
        showTasks = !showTasks;
    }

    private void ShowTaskDialog(TaskModel task)
    {
        selectedTask = task;
        taskModal.Show();
    }

    private void CloseTaskDialog()
    {
        taskModal.Hide();
    }

    public class VisitModel
    {
        public string CarModel { get; set; }
        public string ProblemDescription { get; set; }
        public DateTime VisitDate { get; set; }
    }

    public class TaskModel
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        // Додаткові властивості для завдання
    }
}