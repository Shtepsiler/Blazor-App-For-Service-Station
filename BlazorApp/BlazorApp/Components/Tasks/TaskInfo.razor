@page "/tasks/add"
@page "/tasks/edit/{TaskId:guid}"
@using BlazorApp.Data
@using BlazorApp.Extensions.ViewModels.JobsVMs
@using BlazorApp.Extensions.ViewModels.IdentityVMs
@using BlazorApp.Services.Interfaces
@using Blazorise
@inject ITasksService TaskService
@inject NavigationManager Navigation
@inject IModalService ModalService
@inject IUserService UserService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<h3>@(TaskId == Guid.Empty ? "Add Task" : "Edit Task")</h3>

<EditForm Model="@task" OnValidSubmit="SaveTask">
    <DataAnnotationsValidator />
    

    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText @bind-Value="task.Name" id="title" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea @bind-Value="task.Task" id="description" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="mechanic" class="form-label">Mechanic</label>
        <InputSelect @bind-Value="task.MechanicId" id="mechanic" class="form-select">
            @foreach (var mechanic in mechanics)
            {
                <option value="@mechanic.Id">@mechanic.UserName</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label for="status" class="form-label">Status</label>
        <InputSelect @bind-Value="task.Status" id="status" class="form-select">
            <option value="Pending">Pending</option>
            <option value="In Progress">In Progress</option>
            <option value="Completed">Completed</option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter]
    public Guid TaskId { get; set; }

    private TaskViewModel task = new TaskViewModel();

    private List<MechanicViewModel> mechanics;

    protected override async Task OnInitializedAsync()
    {
        mechanics = UserService.GetMechanics().Result.ToList();

        if (TaskId != Guid.Empty)
        {
            task = await TaskService.GetTask(TaskId);
        }
    }

    private async Task SaveTask()
    {
        if (TaskId == Guid.Empty)
        {
            await TaskService.AddTask(task);
        }
        else
        {
            await TaskService.UpdateTask(task);
        }

        Navigation.NavigateTo("/tasks");
    }
}
