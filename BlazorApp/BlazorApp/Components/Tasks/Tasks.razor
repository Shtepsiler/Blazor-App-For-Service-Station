@page "/tasks"
@using BlazorApp.Data
@using BlazorApp.Extensions.ViewModels.IdentityVMs
@using BlazorApp.Extensions.ViewModels.JobsVMs
@using BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@inject ITasksService TaskService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@if (mechanics != null && tasks != null)
{
<h3>Tasks</h3>
<AuthorizeView Roles="Admin">
<div class="mb-3">
    <label for="mechanicSelect" class="form-label">Select Mechanic:</label>
    <InputSelect @bind-Value="selectedMechanic" id="mechanicSelect" class="form-select">
        <option value="">All</option>
        @foreach (var mechanic in mechanics)
                {
                    <option value="@mechanic.Id
                    ">@mechanic.UserName
                    </option>
                }
            </InputSelect>
        </div>

        <button class="btn btn-primary" @onclick="AddTask">Add Task</button>
    </AuthorizeView>

    <QuickGrid Items="@tasks">
        <PropertyColumn Property="@(t => t.Name)" Title="Name" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(t => t.Task)" Title="Description" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(t => t.Status)" Title="Status" Sortable="true"></PropertyColumn>
        <TemplateColumn Title="Mechanic">
            <span>@(mechanics.Where(p => p.Id == context.Id).Select(p => p.UserName).FirstOrDefault())</span>
        </TemplateColumn>
        <TemplateColumn Title="Actions">
            <button class="btn btn-secondary" @onclick="() => EditTask(context.Id)">Edit</button>
            <button class="btn btn-danger" @onclick="() => DeleteTask(context.Id)">Delete</button>
        </TemplateColumn>
    </QuickGrid>
}
else
{
    <div>Завантаження</div>
}
@code {
    private IQueryable<TaskViewModel> tasks = Enumerable.Empty < TaskViewModel >().AsQueryable();
    private List<MechanicViewModel> mechanics;
    private Guid selectedMechanic;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tasksVMS = await TaskService.GetTasks();
            tasks = tasksVMS.AsQueryable();

            var mechanicsVMs = await UserService.GetMechanics();
            mechanics = mechanicsVMs.ToList();
        }
        catch(Exception e)
        { }
    }

    private async Task LoadTasks()
    {


        tasks = (selectedMechanic == null || selectedMechanic == Guid.Empty) ?
                 TaskService.GetTasks().Result.AsQueryable() :
                 TaskService.GetTasksByMechanic(selectedMechanic).Result.AsQueryable();

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity.IsAuthenticated)
        {
            var roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();
            // Опрацюйте ролі користувача тут
            try
            {
                if (roles.FirstOrDefault().Equals("Admin"))
                {
                    var tasksvms =  await TaskService.GetTasks();
                    tasks = tasksvms.AsQueryable();

            }
                if (roles.FirstOrDefault().Equals("Mechaic"))
                {
                    var tasksvms = await TaskService.GetTasksByMechanic(Guid.Parse(user.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).First().Value));
                    tasks = tasksvms.AsQueryable();      
                }
            }
            catch (Exception e)
            {

            }
        }
    }

    private void AddTask()
    {
        Navigation.NavigateTo("/tasks/add");
    }

    private void EditTask(Guid taskId)
    {
        Navigation.NavigateTo($"/tasks/edit/{taskId}");
    }

    private async Task DeleteTask(Guid taskId)
    {
        await TaskService.DeleteTask(taskId);
        await LoadTasks();
    }
}
